package CSCI_e10.unit_6;


import javax.swing.*;		// Swing components                
import java.awt.*; 			// Colors, Fonts, etc.                                   
import java.awt.event.*;	// ActionListener, etc.
import java.io.*;			// File I/O

/**
 * 
 * @author mblackford M Bret Blackford 
 * 	ID: 20849347 
 *  CSCI E-10b Sprint 2016 
 *  Unit 6 Problem Set 
 *  question [2] -- MailLayout.java
 *
 *    This program will attempt to simulate an email application. Data
 *    entered into this email application will be output to the file and
 *    location specified in the constant OUTPUT_FILE (change as needed)
 */
public class MailLayout {
	/**
	 * Very basic code to kick-off the application
	 * @param args
	 */
	public static void main(String args[]) {
		Mail ml = new Mail();
		ml.do_layout();
	}
}

/**
 * using a separate class for the real program - so the class
 * with main() does NOT extend JFrame
 * @author M Bret Blackford
 *
 */
class Mail extends JFrame implements ActionListener {
	
	private final String OUTPUT_FILE = "outbox.txt";
	private String defaultMessage = "New Message";

	private JTextField jtxt_to;
	private JTextField jtxt_cc;
	private JTextField jtxt_bcc;
	private JTextField jtxt_subject;

	private JComboBox<String> jcbox_from;
	private JTextArea txtArea_message;
	private JFrame jFrame;

	private JButton jbtn_send;

	/**
	 * do_layout() and do_plumbing() separate the look from the work. The GUI
	 * look is in the do_layout() method.
	 * 
	 */
	public void do_layout() {
		jFrame = new JFrame(defaultMessage);
		jFrame.setLayout(new BorderLayout(5, 5));
		jFrame.setLocationRelativeTo(null); // centers the window

		// create labels
		JLabel jlbl_to = new JLabel("To:", SwingConstants.RIGHT);
		JLabel jlbl_cc = new JLabel("Cc:", SwingConstants.RIGHT);
		JLabel jlbl_bcc = new JLabel("Bcc:", SwingConstants.RIGHT);
		JLabel jlbl_subject = new JLabel("Subject:", SwingConstants.RIGHT);
		JLabel jlbl_from = new JLabel("From:", SwingConstants.RIGHT);

		// use Dr. L's favorite font
		Font font = new Font("Helvetica", Font.BOLD, 18);

		// add font format to labels
		jlbl_to.setFont(font);
		jlbl_cc.setFont(font);
		jlbl_bcc.setFont(font);
		jlbl_subject.setFont(font);
		jlbl_from.setFont(font);

		// create text entry fields for each label
		jtxt_to = new JTextField();
		jtxt_cc = new JTextField();
		jtxt_bcc = new JTextField();
		jtxt_subject = new JTextField();

		// the SUBJECT line has a listener to set the JFrame text
		jtxt_subject.addActionListener(this);

		// JComboBox (drop-down) options
		String[] fromEmail = { "Bret Blackford - Blackford@fas.harvard.edu>",
				"Bret Blackford - Bret_Blackford@Yahoo.com", "Michelle Blackford - M.Blackford@gmail.com" };
		jcbox_from = new JComboBox<>(fromEmail);

		// create button for sending email
		jbtn_send = new JButton("Send");
		jbtn_send.addActionListener(this); // take action when SEND button
											// pressed
		jbtn_send.setFont(font);

		// message area
		txtArea_message = new JTextArea();
		// sent font for the text input area
		txtArea_message.setFont(font);
		txtArea_message.setForeground(Color.BLUE);

		// to maintain desired look of GUI using multiple
		// JPanels which will go into the JFrame
		JPanel top = new JPanel(new BorderLayout());
		JPanel sendButtonPanel = new JPanel();
		JPanel labels = new JPanel(new GridLayout(5, 0, 1, 1));
		JPanel textFields = new JPanel(new GridLayout(5, 0, 1, 1));

		sendButtonPanel.add(jbtn_send);
		top.add(sendButtonPanel, BorderLayout.NORTH);

		// add labels to top area
		labels.add(jlbl_to);
		labels.add(jlbl_cc);
		labels.add(jlbl_bcc);
		labels.add(jlbl_subject);
		labels.add(jlbl_from);

		textFields.add(jtxt_to);
		textFields.add(jtxt_cc);
		textFields.add(jtxt_bcc);
		textFields.add(jtxt_subject);
		textFields.add(jcbox_from);

		// add label grid panel to top of other panel
		top.add(labels, BorderLayout.WEST);
		top.add(textFields, BorderLayout.CENTER); // largest area when resized

		// adding JPanels to JFrame
		jFrame.add(top, BorderLayout.NORTH);
		jFrame.add(txtArea_message, BorderLayout.CENTER);

		jFrame.setSize(450, 500); // default window size
		jFrame.setVisible(true);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}

	/**
	 * This is the listener method When the SEND button is pressed specific
	 * action is taken. Likewise, when text entered into the SUBJECT text box
	 * action is taken.
	 * 
	 * @param ae
	 *            The event generated by the button click or hitting ENTER in
	 *            the Subject JTextBox
	 */
	public void actionPerformed(ActionEvent ae) {
		if (ae.getSource() == jbtn_send) {
			// System.out.println("Here jbtn_send");
			do_plumbing(txtArea_message);
		} else if (ae.getSource() == jtxt_subject) {
			// System.out.println("Here jtxt_subject");
			jFrame.setTitle(jtxt_subject.getText());
		} else {
			System.out.println("Here ???");
		}
	}

	/**
	 * do_layout() and do_plumbing() separate the look from the work. The GUI
	 * look is in the do_layout()
	 * 
	 * @param message.
	 *            do_plumbing() specifies the actions taken and can be modified
	 *            without changing the look of the GUI
	 */
	public void do_plumbing(JTextArea message) {

		// if the to-field or subject is blank display a pop-up warning
		if (jtxt_to.getText().equals("")) {
			JOptionPane.showMessageDialog(null, "Please provide an email address.");
			jtxt_to.requestFocusInWindow();
		} else if (jtxt_subject.getText().equals("")) {
			JOptionPane.showMessageDialog(null, "Please provide a subject");
			jtxt_subject.requestFocusInWindow();
		} else {
			//no problems found 
			
			writeTextToFile();

			JOptionPane.showMessageDialog(null, "Your email has been sent and written to " + OUTPUT_FILE);
			clearFields();

			// reset focus to first field
			jtxt_to.requestFocusInWindow();
			jFrame.setTitle(defaultMessage);
		}
	}

	/**
	 * Method will put contents of email into
	 * a string which van be written to a file
	 */
	public String toString() {
		String outText = "To: " + jtxt_to.getText() + "\n";
		outText += "Cc: " + jtxt_cc.getText() + "\n";
		outText += "Bcc: " + jtxt_bcc.getText() + "\n";
		outText += "Subject: " + jtxt_subject.getText() + "\n";
		outText += "From: " + jcbox_from.getSelectedItem() + "\n";
		outText += "Message: \n";
		outText += "-------- \n";
		outText += txtArea_message.getText() + "\n";

		return outText;
	}

	/**
	 * Method clears the various email form fields
	 */
	public void clearFields() {
		jtxt_to.setText(null);
		jtxt_cc.setText(null);
		jtxt_bcc.setText(null);
		jtxt_subject.setText(null);
		txtArea_message.setText(null);
	}

	/**
	 * Method will write the text of the email into
	 * a file specified by the OUTPUT_FILE variable
	 */
	public void writeTextToFile() {
		System.out.println("am I here?");
		File fileName = new File(OUTPUT_FILE);

		FileWriter outStream;
		try {
			outStream = new FileWriter(fileName);
			outStream.append(toString());
			outStream.close();
		} catch (IOException e) {
			txtArea_message.setText("IOERROR: " + e.getMessage() + "\n");
			e.printStackTrace();
		}
	}

}
